/*TimeElapsed.js-  for measuring elapsed time 
TimeList.js- displaying the recorded times .

/*We're giving you this function. Take a look at it, you might see some usage
 that's new and different. That's because we're avoiding a well-known, but
 sneaky bug that we'll cover in the next few lessons!

 As a result, the lessons for this function will pass *and* it will be available
 for you to use if you need it!
 */

 const allWagesFor = function () {
  const eligibleDates = this.timeInEvents.map(function (e) {
      return e.date
  })

  const payable = eligibleDates.reduce(function (memo, d) {
      return memo + wagesEarnedOnDate.call(this, d)
  }.bind(this), 0) // <== Hm, why did we need to add bind() there? We'll discuss soon!

  return payable
}
function createEmployeeRecord(arr){
  return {
      firstName : arr[0],
      familyName :arr[1],
      title : arr[2],
      payPerHour : arr[3],
      timeInEvents : [],
      timeOutEvents : []
  }
}
function createEmployeeRecords(arr) {
  const result = arr.map(record => {
      return createEmployeeRecord(record)
  })
  return result
}
function createTimeInEvent(date) {
  const newTimeObj = createTimeEvent(date, 'TimeIn')
  this.timeInEvents.push(newTimeObj)
  return this
}
function createTimeEvent(date, type) {
  return {
      type,
      hour: parseInt(date.split(" ")[1]),
      date: date.split(" ")[0]
  }
}
function createTimeOutEvent(date) {
  this.timeOutEvents.push(createTimeEvent(date, 'TimeOut'))
  return this
}
function hoursWorkedOnDate(date) {
  const timeIn = this.timeInEvents.find(record => record.date === date)
  const timeOut = this.timeOutEvents.find(record => record.date === date)
  return (timeOut.hour -timeIn.hour)/100
}

function wagesEarnedOnDate(date) {
   const timeHour = hoursWorkedOnDate.call(this, date )
   return timeHour*this.payPerHour
}
function findEmployeeByFirstName(records, firstName) {
  const found = records.find(record => record.firstName === firstName);
  return found
}
function calculatePayroll(records){
return records.reduce((acc, record) => {

  return allWagesFor.call(record) + acc
},0)
}

/*
<div id="time-in-out">
      <TimeIn/>
      <TimeOut/>
      </div>
*/


     /*let employees1 = [
      { 
            id : 1,
            name1 : "Ricardo",
            password1: "dolphin",
            
      },
      {
            id : 2,
            name1 : "Edna",
            password1: "Eloise",
           
      },
      {
        id : 3,
            name1 : "Johnny",
            password1: "Kuro",
            
      }
    ]*/

    import React, { useState } from 'react';

function EmployeeEdit() {
  const [employeeId, setEmployeeId] = useState('');
  const [employeeData, setEmployeeData] = useState(null);

  const handleEmployeeIdChange = (e) => {
    setEmployeeId(e.target.value);
  };

  const handleFormSubmit = (e) => {
    e.preventDefault();

    // Fetch employee data based on the entered ID
    fetch(`http://localhost:3001/employees/${employeeId}`)
      .then((resp) => {
        if (resp.status === 404) {
          throw new Error('Employee not found');
        }
        return resp.json();
      })
      .then((data) => {
        setEmployeeData(data);
        console.log(data)
      })
      .catch((error) => {
        console.error('Error fetching employee data:', error);
      });
  };

  const handleUpdateEmployee = (updatedData) => {
    // Send a PATCH request to update the employee using updatedData
    fetch(`http://localhost:3001/employees/${employeeId}`, {
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(updatedData),
    })
      .then((resp) => resp.json())
      .then((data) => {
        // Handle the response from the server, if needed
        console.log('Employee updated:', data);
      })
      .catch((error) => {
        console.error('Error updating employee:', error);
      });
  };
       
  return (
    <div>
      <h2>Update Employee</h2>
      <form onSubmit={handleFormSubmit}>
        <div>
          <label>Enter Employee ID:</label>
          <input
            type="text"
            value={employeeId}
            onChange={handleEmployeeIdChange}
          />
        </div>
        <button type="submit">Fetch Employee</button>
      </form>

      {employeeData && (
        <EmployeeUpdateForm
          employeeData={employeeData}
          onUpdateEmployee={handleUpdateEmployee}
        />
      )}
    </div>
  );
}

function EmployeeUpdateForm({ employeeData, onUpdateEmployee }) {
  // Create state variables for the fields you want to update
  //const [id, setId] = useState(employeeData.id);
  const [name, setName] = useState(employeeData.name);
  const [image, setImage] = useState(employeeData.image);
  const [userName, setUserName] = useState(employeeData.userName);
  const [password, setPassword] = useState(employeeData.password);
  const [position, setPosition] = useState(employeeData.position);
  const [schedule, setSchedule] = useState(employeeData.schedule);
  const [workTime, setWorkTime] = useState(employeeData.workTime);
  const [payPerHour, setPayPerHour] = useState(employeeData.payPerHour);
  const [timeInEvents, setTimeInEvents] = useState(employeeData.timeInEvents);
  const [timeOutEvents, setTimeOutEvents] = useState(employeeData.timeOutEvents);
  const [payForThisWeek, setPayForThisWeek] = useState(employeeData.payForThisWeek);
  
  // Add other fields here

  const handleUpdateClick = () => {
    // Construct updatedData object with the fields you want to update
    const updatedData = {
      name,
      image,
      userName,
    password,
    position,
    schedule,
    workTime,
    payPerHour,
    timeInEvents,
    timeOutEvents,
    payForThisWeek,
      // Add other fields here
    };

    onUpdateEmployee(updatedData);
  };
 
  return (
    <div>
      <h3>Employee Details</h3>
      <p>ID: {employeeData.id}</p>
      <div>
        <label>Name:</label>
        <input type="text" value={name} 
        onChange={(e) => setName(e.target.value)} />
        
      </div>
      <div>
        <label>Image:</label>
        <input type="text" value={image} onChange={(e) => setImage(e.target.value)} />
      </div>
      <div>
        <label>userName:</label>
        <input type="text" value={userName} onChange={(e) => setUserName(e.target.value)} />
      </div>
      <div>
        <label>password:</label>
        <input type="text" value={password} onChange={(e) => setPassword(e.target.value)} />
      </div>
      <div>
        <label>Position:</label>
        <input type="text" value={position} onChange={(e) => setPosition(e.target.value)} />
      </div>
      <div>
        <label>schedule:</label>
        <input type="text" value={schedule} onChange={(e) => setSchedule(e.target.value)} />
      </div>
      <div>
        <label>Worktime:</label>
        <input type="text" value={workTime} onChange={(e) => setWorkTime(e.target.value)} />
      </div>
      <div>
        <label>payPerHour:</label>
        <input type="text" value={payPerHour} onChange={(e) => setPayPerHour(e.target.value)} />
      </div>
      <div>
        <label>timeInEvents:</label>
        <input type="text" value={timeInEvents} onChange={(e) => setTimeInEvents(e.target.value)} />
      </div>
      <div>
        <label>timeOutEvents:</label>
        <input type="text" value={timeOutEvents} onChange={(e) => setTimeOutEvents(e.target.value)} />
      </div>
      <div>
        <label>payForThisWeek:</label>
        <input type="text" value={payForThisWeek} onChange={(e) => setPayForThisWeek(e.target.value)} />
      </div>

      {/* Add other input fields for the fields you want to update */}
      <button onClick={handleUpdateClick}>Update Employee</button>
      
    </div>
  );
}

/*export default EmployeeEdit;*/
